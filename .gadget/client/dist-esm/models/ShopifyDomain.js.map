{
  "version": 3,
  "sources": ["../../src/models/ShopifyDomain.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n  IDsList,\n      ShopifyDomain,\n      ShopifyDomainSort,\n      ShopifyDomainFilter,\n      AvailableShopifyDomainSelection,\n      CreateShopifyDomainInput,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultShopifyDomainSelection = {\n  \"__typename\": true,\n  \"createdAt\": true,\n  \"host\": true,\n  \"id\": true,\n  \"localization\": true,\n  \"sslEnabled\": true,\n  \"updatedAt\": true,\n  \"url\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"shopifyDomain\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyDomainOrDefault<Options extends Selectable<AvailableShopifyDomainSelection>> = DeepFilterNever<\n  Select<\n    ShopifyDomain,\n    DefaultSelection<\n      AvailableShopifyDomainSelection,\n      Options,\n      typeof DefaultShopifyDomainSelection\n    >\n  >>;\n\n/** Options that can be passed to the `ShopifyDomainManager#findOne` method */\nexport interface FindOneShopifyDomainOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n};\n\n/** Options that can be passed to the `ShopifyDomainManager#maybeFindOne` method */\nexport interface MaybeFindOneShopifyDomainOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n};\n\n/** Options that can be passed to the `ShopifyDomainManager#findMany` method */\nexport interface FindManyShopifyDomainsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDomainSort | ShopifyDomainSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDomainFilter | ShopifyDomainFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyDomainManager#findFirst` method */\nexport interface FindFirstShopifyDomainOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDomainSort | ShopifyDomainSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDomainFilter | ShopifyDomainFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyDomainManager#maybeFindFirst` method */\nexport interface MaybeFindFirstShopifyDomainOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyDomainSort | ShopifyDomainSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyDomainFilter | ShopifyDomainFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\nexport interface CreateShopifyDomainOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyDomainSelection;\n};\n\n\nconst apiIdentifier = \"shopifyDomain\";\nconst pluralApiIdentifier = \"shopifyDomains\";\n\n\n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedCreateShopifyDomainVariables = {\n          shopifyDomain?: CreateShopifyDomainInput,\n      }\n\n  /**\n   * The inputs for executing create on shopifyDomain.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type CreateShopifyDomainVariables = CreateShopifyDomainInput;\n\n\n\n/**\n * The return value from executing create on shopifyDomain.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type CreateShopifyDomainResult<Options extends CreateShopifyDomainOptions> =\n  SelectedShopifyDomainOrDefault<Options> extends void ? void : GadgetRecord<SelectedShopifyDomainOrDefault<Options>>\n;\n\n\n/**\n  * Executes the create action. Accepts the parameters for the action via the `variables` argument. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function createShopifyDomain<Options extends CreateShopifyDomainOptions>(\n  \n    variables: CreateShopifyDomainVariables,\n\n  options?: LimitToKnownKeys<Options, CreateShopifyDomainOptions>\n): Promise<CreateShopifyDomainResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function createShopifyDomain<Options extends CreateShopifyDomainOptions>(\n  \n      variables: FullyQualifiedCreateShopifyDomainVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateShopifyDomainOptions>\n): Promise<CreateShopifyDomainResult<Options>>;\n\n// Function implementation\nasync function createShopifyDomain<Options extends CreateShopifyDomainOptions>(\n  this: ShopifyDomainManager,\n  \n      variables: CreateShopifyDomainVariables | FullyQualifiedCreateShopifyDomainVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateShopifyDomainOptions>\n): Promise<CreateShopifyDomainResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"create\"],\n       undefined,\n      variables\n    );\n\n  return (await actionRunner<SelectedShopifyDomainOrDefault<Options>>(\n    this,\n    \"createShopifyDomain\",\n    DefaultShopifyDomainSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n                    \"shopifyDomain\": {\n          value: newVariables.shopifyDomain,\n          required: false,\n          type: \"CreateShopifyDomainInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n\n\n\n/** All the actions available at the collection level and record level for \"shopifyDomain\" */\nexport class ShopifyDomainManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one shopifyDomain by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneShopifyDomainOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"shopifyDomain\";\n  modelApiIdentifier: \"shopifyDomain\";\n  defaultSelection: typeof DefaultShopifyDomainSelection;\n  selectionType: AvailableShopifyDomainSelection;\n  optionsType: FindOneShopifyDomainOptions;\n  schemaType: Query[\"shopifyDomain\"];\n} = Object.assign(\n  async <Options extends FindOneShopifyDomainOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyDomainOptions>) => {\n    return await findOneRunner<SelectedShopifyDomainOrDefault<Options>>(\n      this,\n      \"shopifyDomain\",\n      id,\n      DefaultShopifyDomainSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyDomain\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDomainSelection,\n  } as any\n)\n\n  \n    /**\n * Finds one shopifyDomain by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneShopifyDomainOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"shopifyDomain\";\n  modelApiIdentifier: \"shopifyDomain\";\n  defaultSelection: typeof DefaultShopifyDomainSelection;\n  selectionType: AvailableShopifyDomainSelection;\n  optionsType: MaybeFindOneShopifyDomainOptions;\n  schemaType: Query[\"shopifyDomain\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneShopifyDomainOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyDomainOptions>) => {\n    const record = await findOneRunner<SelectedShopifyDomainOrDefault<Options>>(\n      this,\n      \"shopifyDomain\",\n      id,\n      DefaultShopifyDomainSelection,\n      apiIdentifier,\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyDomain\",\n    modelApiIdentifier: \"shopifyDomain\",\n    defaultSelection: DefaultShopifyDomainSelection,\n  } as any\n)\n\n  \n    /**\n * Finds many shopifyDomain. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyShopifyDomainsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyDomainsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyDomainOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"shopifyDomains\";\n  modelApiIdentifier: \"shopifyDomain\";\n  defaultSelection: typeof DefaultShopifyDomainSelection;\n  selectionType: AvailableShopifyDomainSelection;\n  optionsType: FindManyShopifyDomainsOptions;\n  schemaType: Query[\"shopifyDomain\"];\n} = Object.assign(\n  async <Options extends FindManyShopifyDomainsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyDomainsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyDomainOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedShopifyDomainOrDefault<Options>>(\n      this,\n      \"shopifyDomains\",\n      DefaultShopifyDomainSelection,\n      \"shopifyDomain\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"shopifyDomains\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDomainSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyDomain. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstShopifyDomainOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"shopifyDomains\";\n  modelApiIdentifier: \"shopifyDomain\";\n  defaultSelection: typeof DefaultShopifyDomainSelection;\n  selectionType: AvailableShopifyDomainSelection;\n  optionsType: FindFirstShopifyDomainOptions;\n  schemaType: Query[\"shopifyDomain\"];\n} = Object.assign(\n  async <Options extends FindFirstShopifyDomainOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyDomainOrDefault<Options>>(\n      this,\n      \"shopifyDomains\",\n      DefaultShopifyDomainSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"shopifyDomains\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDomainSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyDomain. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstShopifyDomainOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"shopifyDomains\";\n  modelApiIdentifier: \"shopifyDomain\";\n  defaultSelection: typeof DefaultShopifyDomainSelection;\n  selectionType: AvailableShopifyDomainSelection;\n  optionsType: MaybeFindFirstShopifyDomainOptions;\n  schemaType: Query[\"shopifyDomain\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstShopifyDomainOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyDomainOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyDomainOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyDomainOrDefault<Options>>(\n      this,\n      \"shopifyDomains\",\n      DefaultShopifyDomainSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"shopifyDomains\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyDomainSelection,\n  } as any\n);\n\n  \n    create = Object.assign(createShopifyDomain,\n  {\n    type: \"action\",\n    operationName: \"createShopifyDomain\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultShopifyDomainSelection,\n    variables: {\n      \"shopifyDomain\": {\n        required: false,\n        type: \"CreateShopifyDomainInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"createShopifyDomain\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyDomain\";\n    modelSelectionField: \"shopifyDomain\";\n    isBulk: false;\n    defaultSelection: typeof DefaultShopifyDomainSelection;\n    selectionType: AvailableShopifyDomainSelection;\n    optionsType: CreateShopifyDomainOptions;\n    schemaType:  Query[\"shopifyDomain\"];\n\n    variablesType: (\n\n      (\n        FullyQualifiedCreateShopifyDomainVariables          | CreateShopifyDomainVariables      )\n    )\n    // all variables are optional, so no variables can be passed at all\n    | undefined\n    ;\n    variables: {\n                    \"shopifyDomain\": {\n          required: false;\n          type: \"CreateShopifyDomainInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkCreate action with the given inputs.\n  */\n  bulkCreate: {\n    <Options extends CreateShopifyDomainOptions>(\n        inputs: (FullyQualifiedCreateShopifyDomainVariables | CreateShopifyDomainVariables)[],\n      options?: LimitToKnownKeys<Options, CreateShopifyDomainOptions>\n    ): Promise<CreateShopifyDomainResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkCreateShopifyDomains\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyDomain\";\n    modelSelectionField: \"shopifyDomains\";\n    isBulk: true;\n    defaultSelection: typeof DefaultShopifyDomainSelection;\n    selectionType: AvailableShopifyDomainSelection;\n    optionsType: CreateShopifyDomainOptions;\n    schemaType: Query[\"shopifyDomain\"];\n    variablesType: (FullyQualifiedCreateShopifyDomainVariables | CreateShopifyDomainVariables)[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkCreateShopifyDomainsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends CreateShopifyDomainOptions>(\n        inputs: (FullyQualifiedCreateShopifyDomainVariables | CreateShopifyDomainVariables)[],\n      options?: LimitToKnownKeys<Options, CreateShopifyDomainOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"create\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkCreateShopifyDomains\",\n        DefaultShopifyDomainSelection,\n        \"shopifyDomain\",\n        \"shopifyDomains\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkCreate\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkCreateShopifyDomains\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"shopifyDomains\",\n      isBulk: true,\n      defaultSelection: DefaultShopifyDomainSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkCreateShopifyDomainsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n}\n"],
  "mappings": "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",
  "names": []
}
