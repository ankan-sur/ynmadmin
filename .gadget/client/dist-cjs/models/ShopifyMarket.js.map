{
  "version": 3,
  "sources": ["../../src/models/ShopifyMarket.ts"],
  "sourcesContent": ["import {\n  GadgetConnection,\n  GadgetRecord,\n  GadgetRecordImplementation,\n  GadgetRecordList,\n  GadgetNonUniqueDataError,\n  actionRunner,\n  findManyRunner,\n  findOneRunner,\n  findOneByFieldRunner,\n  DefaultSelection,\n  LimitToKnownKeys,\n  Selectable\n} from \"@gadgetinc/api-client-core\";\n\nimport {\n  Query,\n  ExplicitNestingRequired,\n  Select,\n  DeepFilterNever,\n  IDsList,\n      ShopifyMarket,\n      ShopifyMarketSort,\n      ShopifyMarketFilter,\n      AvailableShopifyMarketSelection,\n      CreateShopifyMarketInput,\n      UpdateShopifyMarketInput,\n  \n} from \"../types.js\";\n\nimport { disambiguateActionParams } from \"../support.js\";\n\nexport const DefaultShopifyMarketSelection = {\n  \"__typename\": true,\n  \"createdAt\": true,\n  \"currencySettings\": true,\n  \"enabled\": true,\n  \"id\": true,\n  \"name\": true,\n  \"primary\": true,\n  \"updatedAt\": true\n} as const;\n\n/**\n* Produce a type that holds only the selected fields (and nested fields) of \"shopifyMarket\". The present fields in the result type of this are dynamic based on the options to each call that uses it.\n* The selected fields are sometimes given by the `Options` at `Options[\"select\"]`, and if a selection isn't made in the options, we use the default selection from above.\n*/\nexport type SelectedShopifyMarketOrDefault<Options extends Selectable<AvailableShopifyMarketSelection>> = DeepFilterNever<\n  Select<\n    ShopifyMarket,\n    DefaultSelection<\n      AvailableShopifyMarketSelection,\n      Options,\n      typeof DefaultShopifyMarketSelection\n    >\n  >>;\n\n/** Options that can be passed to the `ShopifyMarketManager#findOne` method */\nexport interface FindOneShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n};\n\n/** Options that can be passed to the `ShopifyMarketManager#maybeFindOne` method */\nexport interface MaybeFindOneShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n};\n\n/** Options that can be passed to the `ShopifyMarketManager#findMany` method */\nexport interface FindManyShopifyMarketsOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyMarketSort | ShopifyMarketSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyMarketFilter | ShopifyMarketFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n  first?: number | null;\n  last?: number | null;\n  after?: string | null;\n  before?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyMarketManager#findFirst` method */\nexport interface FindFirstShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyMarketSort | ShopifyMarketSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyMarketFilter | ShopifyMarketFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n/** Options that can be passed to the `ShopifyMarketManager#maybeFindFirst` method */\nexport interface MaybeFindFirstShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n  /** Return records sorted by these sorts */\n  sort?: ShopifyMarketSort | ShopifyMarketSort[] | null;\n  /** Only return records matching these filters. */\n  filter?: ShopifyMarketFilter | ShopifyMarketFilter[] | null;\n  /** Only return records matching this freeform search string */\n  search?: string | null;\n};\n\n\nexport interface CreateShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n};\n\n\nexport interface UpdateShopifyMarketOptions {\n  /** Select fields other than the defaults of the record to return */\n  select?: AvailableShopifyMarketSelection;\n};\n\n\nexport interface DeleteShopifyMarketOptions {\n};\n\n\nconst apiIdentifier = \"shopifyMarket\";\nconst pluralApiIdentifier = \"shopifyMarkets\";\n\n\n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedCreateShopifyMarketVariables = {\n          shopifyMarket?: CreateShopifyMarketInput,\n      }\n\n  /**\n   * The inputs for executing create on shopifyMarket.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type CreateShopifyMarketVariables = CreateShopifyMarketInput;\n\n\n\n/**\n * The return value from executing create on shopifyMarket.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type CreateShopifyMarketResult<Options extends CreateShopifyMarketOptions> =\n  SelectedShopifyMarketOrDefault<Options> extends void ? void : GadgetRecord<SelectedShopifyMarketOrDefault<Options>>\n;\n\n\n/**\n  * Executes the create action. Accepts the parameters for the action via the `variables` argument. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function createShopifyMarket<Options extends CreateShopifyMarketOptions>(\n  \n    variables: CreateShopifyMarketVariables,\n\n  options?: LimitToKnownKeys<Options, CreateShopifyMarketOptions>\n): Promise<CreateShopifyMarketResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function createShopifyMarket<Options extends CreateShopifyMarketOptions>(\n  \n      variables: FullyQualifiedCreateShopifyMarketVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateShopifyMarketOptions>\n): Promise<CreateShopifyMarketResult<Options>>;\n\n// Function implementation\nasync function createShopifyMarket<Options extends CreateShopifyMarketOptions>(\n  this: ShopifyMarketManager,\n  \n      variables: CreateShopifyMarketVariables | FullyQualifiedCreateShopifyMarketVariables,\n  \n  options?: LimitToKnownKeys<Options, CreateShopifyMarketOptions>\n): Promise<CreateShopifyMarketResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"create\"],\n       undefined,\n      variables\n    );\n\n  return (await actionRunner<SelectedShopifyMarketOrDefault<Options>>(\n    this,\n    \"createShopifyMarket\",\n    DefaultShopifyMarketSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n                    \"shopifyMarket\": {\n          value: newVariables.shopifyMarket,\n          required: false,\n          type: \"CreateShopifyMarketInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n  /**\n   * The fully-qualified, expanded form of the inputs for executing this action.\n   * The flattened style should be preferred over this style, but for models with ambiguous API identifiers, this style can be used to remove any ambiguity.\n   **/\n  export type FullyQualifiedUpdateShopifyMarketVariables = {\n          shopifyMarket?: UpdateShopifyMarketInput,\n      }\n\n  /**\n   * The inputs for executing update on shopifyMarket.\n   * This is the flattened style of inputs, suitable for general use, and should be preferred.\n   **/\n\n    export type UpdateShopifyMarketVariables = UpdateShopifyMarketInput;\n\n\n\n/**\n * The return value from executing update on shopifyMarket.\n * \"Is a GadgetRecord of the model's type.\"\n **/\nexport type UpdateShopifyMarketResult<Options extends UpdateShopifyMarketOptions> =\n  SelectedShopifyMarketOrDefault<Options> extends void ? void : GadgetRecord<SelectedShopifyMarketOrDefault<Options>>\n;\n\n\n/**\n  * Executes the update action on one record specified by `id`. Runs the action and returns a Promise for the updated record.\n  */\n\n// Flat style overload\nasync function updateShopifyMarket<Options extends UpdateShopifyMarketOptions>(\n  id: string,\n    variables: UpdateShopifyMarketVariables,\n\n  options?: LimitToKnownKeys<Options, UpdateShopifyMarketOptions>\n): Promise<UpdateShopifyMarketResult<Options>>;\n\n// Fully qualified, nested api identifier overload\nasync function updateShopifyMarket<Options extends UpdateShopifyMarketOptions>(\n  id: string,\n      variables: FullyQualifiedUpdateShopifyMarketVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateShopifyMarketOptions>\n): Promise<UpdateShopifyMarketResult<Options>>;\n\n// Function implementation\nasync function updateShopifyMarket<Options extends UpdateShopifyMarketOptions>(\n  this: ShopifyMarketManager,\n  id: string,\n      variables: UpdateShopifyMarketVariables | FullyQualifiedUpdateShopifyMarketVariables,\n  \n  options?: LimitToKnownKeys<Options, UpdateShopifyMarketOptions>\n): Promise<UpdateShopifyMarketResult<Options>> {\n    const newVariables = disambiguateActionParams(\n      this[\"update\"],\n       id,\n      variables\n    );\n\n  return (await actionRunner<SelectedShopifyMarketOrDefault<Options>>(\n    this,\n    \"updateShopifyMarket\",\n    DefaultShopifyMarketSelection,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                    \"shopifyMarket\": {\n          value: newVariables.shopifyMarket,\n          required: false,\n          type: \"UpdateShopifyMarketInput\",\n        },\n          },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n    \n\n/**\n * The return value from executing delete on shopifyMarket.\n * \"Is void because this action deletes the record\"\n **/\nexport type DeleteShopifyMarketResult<Options extends DeleteShopifyMarketOptions> =\n  void extends void ? void : GadgetRecord<SelectedShopifyMarketOrDefault<Options>>\n;\n\n\n/**\n  * Executes the delete action on one record specified by `id`. Deletes the record on the server. Returns a Promise that resolves if the delete succeeds.\n  */\n\n// Fully qualified, nested api identifier overload\nasync function deleteShopifyMarket<Options extends DeleteShopifyMarketOptions>(\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteShopifyMarketOptions>\n): Promise<DeleteShopifyMarketResult<Options>>;\n\n// Function implementation\nasync function deleteShopifyMarket<Options extends DeleteShopifyMarketOptions>(\n  this: ShopifyMarketManager,\n  id: string,\n  \n  options?: LimitToKnownKeys<Options, DeleteShopifyMarketOptions>\n): Promise<DeleteShopifyMarketResult<Options>> {\n\n  return (await actionRunner<void>(\n    this,\n    \"deleteShopifyMarket\",\n    null,\n    apiIdentifier,\n    apiIdentifier,\n    false,\n    {\n              id: {\n          value: id,\n          required: true,\n          type: \"GadgetID\",\n        },\n                },\n    options,\n    null,\n    false\n  ));\n}\n\n  \n\n\n\n/** All the actions available at the collection level and record level for \"shopifyMarket\" */\nexport class ShopifyMarketManager {\n  constructor(readonly connection: GadgetConnection) {}\n\n  \n    /**\n * Finds one shopifyMarket by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nfindOne: {\n  <Options extends FindOneShopifyMarketOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      >\n    >;\n  type: \"findOne\",\n  findByVariableName: \"id\";\n  operationName: \"shopifyMarket\";\n  modelApiIdentifier: \"shopifyMarket\";\n  defaultSelection: typeof DefaultShopifyMarketSelection;\n  selectionType: AvailableShopifyMarketSelection;\n  optionsType: FindOneShopifyMarketOptions;\n  schemaType: Query[\"shopifyMarket\"];\n} = Object.assign(\n  async <Options extends FindOneShopifyMarketOptions>(id: string, options?: LimitToKnownKeys<Options, FindOneShopifyMarketOptions>) => {\n    return await findOneRunner<SelectedShopifyMarketOrDefault<Options>>(\n      this,\n      \"shopifyMarket\",\n      id,\n      DefaultShopifyMarketSelection,\n      apiIdentifier,\n      options\n    );\n  },\n  {\n    type: \"findOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyMarket\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyMarketSelection,\n  } as any\n)\n\n  \n    /**\n * Finds one shopifyMarket by ID. Returns a Promise that resolves to the record if found and rejects the promise if the record isn't found.\n **/\nmaybeFindOne: {\n  <Options extends MaybeFindOneShopifyMarketOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindOne\";\n  findByVariableName: \"id\";\n  operationName: \"shopifyMarket\";\n  modelApiIdentifier: \"shopifyMarket\";\n  defaultSelection: typeof DefaultShopifyMarketSelection;\n  selectionType: AvailableShopifyMarketSelection;\n  optionsType: MaybeFindOneShopifyMarketOptions;\n  schemaType: Query[\"shopifyMarket\"];\n} = Object.assign(\n  async <Options extends MaybeFindOneShopifyMarketOptions>(id: string, options?: LimitToKnownKeys<Options, MaybeFindOneShopifyMarketOptions>) => {\n    const record = await findOneRunner<SelectedShopifyMarketOrDefault<Options>>(\n      this,\n      \"shopifyMarket\",\n      id,\n      DefaultShopifyMarketSelection,\n      apiIdentifier,\n      options,\n      false\n    );\n    return record.isEmpty() ? null : record;\n  },\n  {\n    type: \"maybeFindOne\",\n    findByVariableName: \"id\",\n    operationName: \"shopifyMarket\",\n    modelApiIdentifier: \"shopifyMarket\",\n    defaultSelection: DefaultShopifyMarketSelection,\n  } as any\n)\n\n  \n    /**\n * Finds many shopifyMarket. Returns a `Promise` for a `GadgetRecordList` of objects according to the passed `options`. Optionally filters the returned records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindMany: {\n  <Options extends FindManyShopifyMarketsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyMarketsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyMarketOrDefault<Options>\n      >\n    >;\n  type: \"findMany\";\n  operationName: \"shopifyMarkets\";\n  modelApiIdentifier: \"shopifyMarket\";\n  defaultSelection: typeof DefaultShopifyMarketSelection;\n  selectionType: AvailableShopifyMarketSelection;\n  optionsType: FindManyShopifyMarketsOptions;\n  schemaType: Query[\"shopifyMarket\"];\n} = Object.assign(\n  async <Options extends FindManyShopifyMarketsOptions>(options?: LimitToKnownKeys<Options, FindManyShopifyMarketsOptions>):\n    Promise<\n      GadgetRecordList<\n        SelectedShopifyMarketOrDefault<Options>\n      >\n    > =>\n  {\n    return await findManyRunner<SelectedShopifyMarketOrDefault<Options>>(\n      this,\n      \"shopifyMarkets\",\n      DefaultShopifyMarketSelection,\n      \"shopifyMarket\",\n      options\n    );\n  },\n  {\n    type: \"findMany\",\n    operationName: \"shopifyMarkets\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyMarketSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyMarket. Returns a `Promise` that resolves to a record if found and rejects the promise if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` and `first`/`after` pagination options.\n **/\nfindFirst: {\n  <Options extends FindFirstShopifyMarketOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      >\n    >;\n  type: \"findFirst\";\n  operationName: \"shopifyMarkets\";\n  modelApiIdentifier: \"shopifyMarket\";\n  defaultSelection: typeof DefaultShopifyMarketSelection;\n  selectionType: AvailableShopifyMarketSelection;\n  optionsType: FindFirstShopifyMarketOptions;\n  schemaType: Query[\"shopifyMarket\"];\n} = Object.assign(\n  async <Options extends FindFirstShopifyMarketOptions>(options?: LimitToKnownKeys<Options, FindFirstShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      >\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyMarketOrDefault<Options>>(\n      this,\n      \"shopifyMarkets\",\n      DefaultShopifyMarketSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      true\n    );\n    return list[0];\n  },\n  {\n    type: \"findFirst\",\n    operationName: \"shopifyMarkets\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyMarketSelection,\n  } as any\n);\n\n  \n    /**\n * Finds the first matching shopifyMarket. Returns a `Promise` that resolves to a record if found, or null if a record isn't found, according to the passed `options`. Optionally filters the searched records using `filter` option, sorts records using the `sort` option, searches using the `search` options, and paginates using the `last`/`before` pagination options.\n **/\nmaybeFindFirst: {\n  <Options extends MaybeFindFirstShopifyMarketOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      > | null\n    >;\n  type: \"maybeFindFirst\";\n  operationName: \"shopifyMarkets\";\n  modelApiIdentifier: \"shopifyMarket\";\n  defaultSelection: typeof DefaultShopifyMarketSelection;\n  selectionType: AvailableShopifyMarketSelection;\n  optionsType: MaybeFindFirstShopifyMarketOptions;\n  schemaType: Query[\"shopifyMarket\"];\n} = Object.assign(\n  async <Options extends MaybeFindFirstShopifyMarketOptions>(options?: LimitToKnownKeys<Options, MaybeFindFirstShopifyMarketOptions>):\n    Promise<\n      GadgetRecord<\n        SelectedShopifyMarketOrDefault<Options>\n      > | null\n    > =>\n  {\n    const list = await findManyRunner<SelectedShopifyMarketOrDefault<Options>>(\n      this,\n      \"shopifyMarkets\",\n      DefaultShopifyMarketSelection,\n      apiIdentifier,\n      { ...options, first: 1, last: undefined, before: undefined, after: undefined },\n      false\n    );\n    return list?.[0] ?? null;\n  },\n  {\n    type: \"maybeFindFirst\",\n    operationName: \"shopifyMarkets\",\n    modelApiIdentifier: apiIdentifier,\n    defaultSelection: DefaultShopifyMarketSelection,\n  } as any\n);\n\n  \n    create = Object.assign(createShopifyMarket,\n  {\n    type: \"action\",\n    operationName: \"createShopifyMarket\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultShopifyMarketSelection,\n    variables: {\n      \"shopifyMarket\": {\n        required: false,\n        type: \"CreateShopifyMarketInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"createShopifyMarket\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarket\";\n    isBulk: false;\n    defaultSelection: typeof DefaultShopifyMarketSelection;\n    selectionType: AvailableShopifyMarketSelection;\n    optionsType: CreateShopifyMarketOptions;\n    schemaType:  Query[\"shopifyMarket\"];\n\n    variablesType: (\n\n      (\n        FullyQualifiedCreateShopifyMarketVariables          | CreateShopifyMarketVariables      )\n    )\n    // all variables are optional, so no variables can be passed at all\n    | undefined\n    ;\n    variables: {\n                    \"shopifyMarket\": {\n          required: false;\n          type: \"CreateShopifyMarketInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkCreate action with the given inputs.\n  */\n  bulkCreate: {\n    <Options extends CreateShopifyMarketOptions>(\n        inputs: (FullyQualifiedCreateShopifyMarketVariables | CreateShopifyMarketVariables)[],\n      options?: LimitToKnownKeys<Options, CreateShopifyMarketOptions>\n    ): Promise<CreateShopifyMarketResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkCreateShopifyMarkets\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarkets\";\n    isBulk: true;\n    defaultSelection: typeof DefaultShopifyMarketSelection;\n    selectionType: AvailableShopifyMarketSelection;\n    optionsType: CreateShopifyMarketOptions;\n    schemaType: Query[\"shopifyMarket\"];\n    variablesType: (FullyQualifiedCreateShopifyMarketVariables | CreateShopifyMarketVariables)[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkCreateShopifyMarketsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends CreateShopifyMarketOptions>(\n        inputs: (FullyQualifiedCreateShopifyMarketVariables | CreateShopifyMarketVariables)[],\n      options?: LimitToKnownKeys<Options, CreateShopifyMarketOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"create\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkCreateShopifyMarkets\",\n        DefaultShopifyMarketSelection,\n        \"shopifyMarket\",\n        \"shopifyMarkets\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkCreate\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkCreateShopifyMarkets\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"shopifyMarkets\",\n      isBulk: true,\n      defaultSelection: DefaultShopifyMarketSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkCreateShopifyMarketsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n    update = Object.assign(updateShopifyMarket,\n  {\n    type: \"action\",\n    operationName: \"updateShopifyMarket\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: DefaultShopifyMarketSelection,\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n      \"shopifyMarket\": {\n        required: false,\n        type: \"UpdateShopifyMarketInput\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: true,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"updateShopifyMarket\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarket\";\n    isBulk: false;\n    defaultSelection: typeof DefaultShopifyMarketSelection;\n    selectionType: AvailableShopifyMarketSelection;\n    optionsType: UpdateShopifyMarketOptions;\n    schemaType:  Query[\"shopifyMarket\"];\n\n    variablesType: (\n        { id: string } &\n\n      (\n        FullyQualifiedUpdateShopifyMarketVariables          | UpdateShopifyMarketVariables      )\n    )\n    ;\n    variables: {\n              id: {\n          required: true;\n          type: \"GadgetID\";\n        };\n                    \"shopifyMarket\": {\n          required: false;\n          type: \"UpdateShopifyMarketInput\";\n        };\n          };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: true;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: true;\n  }\n)\n\n  \n      /**\n  * Executes the bulkUpdate action with the given inputs.\n  */\n  bulkUpdate: {\n    <Options extends UpdateShopifyMarketOptions>(\n        inputs: (FullyQualifiedUpdateShopifyMarketVariables | UpdateShopifyMarketVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, UpdateShopifyMarketOptions>\n    ): Promise<UpdateShopifyMarketResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkUpdateShopifyMarkets\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarkets\";\n    isBulk: true;\n    defaultSelection: typeof DefaultShopifyMarketSelection;\n    selectionType: AvailableShopifyMarketSelection;\n    optionsType: UpdateShopifyMarketOptions;\n    schemaType: Query[\"shopifyMarket\"];\n    variablesType: (FullyQualifiedUpdateShopifyMarketVariables | UpdateShopifyMarketVariables & { id: string })[];\n    variables: {\n        inputs: {\n          required: true;\n          type: \"[BulkUpdateShopifyMarketsInput!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends UpdateShopifyMarketOptions>(\n        inputs: (FullyQualifiedUpdateShopifyMarketVariables | UpdateShopifyMarketVariables & { id: string })[],\n      options?: LimitToKnownKeys<Options, UpdateShopifyMarketOptions>\n    ) => {\n        const fullyQualifiedInputs = inputs.map(input =>\n          disambiguateActionParams(\n            this[\"update\"],\n            undefined,\n            input\n          )\n        );\n      \n      return (await actionRunner<any>(\n        this,\n        \"bulkUpdateShopifyMarkets\",\n        DefaultShopifyMarketSelection,\n        \"shopifyMarket\",\n        \"shopifyMarkets\",\n        true,\n          {\n            inputs: {\n              value: fullyQualifiedInputs,\n              ...this[\"bulkUpdate\"].variables[\"inputs\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkUpdateShopifyMarkets\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"shopifyMarkets\",\n      isBulk: true,\n      defaultSelection: DefaultShopifyMarketSelection,\n      variables: {\n        inputs: {\n          required: true,\n          type: \"[BulkUpdateShopifyMarketsInput!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: true,\n    } as any\n  );\n\n  \n    delete = Object.assign(deleteShopifyMarket,\n  {\n    type: \"action\",\n    operationName: \"deleteShopifyMarket\",\n    namespace: null,\n    modelApiIdentifier: apiIdentifier,\n    modelSelectionField: apiIdentifier,\n    isBulk: false,\n    defaultSelection: null,\n    variables: {\n      id: {\n        required: true,\n        type: \"GadgetID\",\n      },\n    },\n    hasAmbiguousIdentifier: false,\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: false,\n    paramOnlyVariables: [],\n    hasReturnType: false,\n    acceptsModelInput: false,\n  } as unknown as {\n    type: \"action\";\n    operationName: \"deleteShopifyMarket\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarket\";\n    isBulk: false;\n    defaultSelection: null;\n    selectionType: Record<string, never>;\n    optionsType: DeleteShopifyMarketOptions;\n    schemaType:  null ;\n\n    variablesType: (\n        { id: string } &\n\n        {}\n    )\n    ;\n    variables: {\n              id: {\n          required: true;\n          type: \"GadgetID\";\n        };\n                };\n    hasAmbiguousIdentifier: false;\n    /** @deprecated -- effects are dead, long live AAC */\n    hasCreateOrUpdateEffect: false;\n    paramOnlyVariables: [];\n    hasReturnType: false;\n    acceptsModelInput: false;\n  }\n)\n\n  \n      /**\n  * Executes the bulkDelete action with the given inputs. Deletes the records on the server.\n  */\n  bulkDelete: {\n    <Options extends DeleteShopifyMarketOptions>(\n        ids: string[],\n      options?: LimitToKnownKeys<Options, DeleteShopifyMarketOptions>\n    ): Promise<DeleteShopifyMarketResult<Options>[]>;\n    type: \"action\";\n    operationName: \"bulkDeleteShopifyMarkets\";\n    namespace: null;\n    modelApiIdentifier: \"shopifyMarket\";\n    modelSelectionField: \"shopifyMarkets\";\n    isBulk: true;\n    defaultSelection: null;\n    selectionType: Record<string, never>;\n    optionsType: DeleteShopifyMarketOptions;\n    schemaType: null;\n    variablesType: IDsList | undefined;\n    variables: {\n        ids: {\n          required: true;\n          type: \"[GadgetID!]\";\n        };\n      };\n    hasReturnType: boolean;\n    acceptsModelInput: boolean;\n  } = Object.assign(\n    async <Options extends DeleteShopifyMarketOptions>(\n        ids: string[],\n      options?: LimitToKnownKeys<Options, DeleteShopifyMarketOptions>\n    ) => {\n\n      return (await actionRunner<any>(\n        this,\n        \"bulkDeleteShopifyMarkets\",\n        null,\n        \"shopifyMarket\",\n        \"shopifyMarkets\",\n        true,\n          {\n            ids: {\n              value: ids,\n              ...this[\"bulkDelete\"].variables[\"ids\"]\n            }\n          }\n,\n        options,\n        null,\n        false\n      )) as any[];\n    },\n    {\n      type: \"action\",\n      operationName: \"bulkDeleteShopifyMarkets\",\n      namespace: null,\n      modelApiIdentifier: apiIdentifier,\n      modelSelectionField: \"shopifyMarkets\",\n      isBulk: true,\n      defaultSelection: null,\n      variables: {\n        ids: {\n          required: true,\n          type: \"[GadgetID!]\",\n        },\n      },\n      hasReturnType: false,\n      acceptsModelInput: false,\n    } as any\n  );\n\n  \n}\n"],
  "mappings": "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",
  "names": []
}
